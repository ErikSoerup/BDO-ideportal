!!! XML

-cache ['idea_search_rss', CGI.escape(params.inspect)], :expires_in => 30.seconds do
  - filtered_params = params.reject { |k,v| %w(controller action format).include?(k) }
  %rss{ :version => "2.0", "xmlns:wfw" => "http://wellformedweb.org/CommentAPI/", "xmlns:dc" => "http://purl.org/dc/elements/1.1/", "xmlns:atom" => "http://www.w3.org/2005/Atom" }
    %channel
      %title
        = LONG_SITE_NAME
        -if params[:search]
          =h @query_title
        -else
          Ideas
      %link
        -if filtered_params.empty?
          =root_url
        -else
          =ideas_url filtered_params
      %atom:link{ :href => ideas_url(filtered_params.merge(:format => 'rss')), :rel => 'self', :type => 'application/rss+xml' }/
      %description
        Ideas posted to
        = LONG_SITE_NAME
      %language
        en-us
      %copyright
        Copyright #{Time.now.year}, #{COMPANY_NAME}.
      -unless current_objects.empty?
        %pubDate
          =rss_date current_objects.first.created_at
      %lastBuildDate
        =rss_date Time.now
      %category
        = COMPANY_NAME
      %generator
        Rails
      -current_objects.each do |idea|
        %item
          %title
            -# DOUBLE-ESCAPING NECESSARY! The RSS client unescapes one layer; we need to prevent hostile HTML injection into the user's RSS reader.
            =h h idea.title
          %link
            =idea_url(idea)
          %comments
            =idea_url(idea) + '#comments'
          %guid
            =idea_url(idea, :title_in_url => false)
          %description
            -# The user_formatted_text call sanitizes what the user entered, then adds HTML tags. The outer h escapes those added tags.
            =h user_formatted_text(idea.description)
          %pubDate
            =rss_date idea.created_at
          %dc:creator
            -# DOUBLE-ESCAPING NECESSARY
            =h h idea.inventor.name
          -idea.tags.each do |tag|
            %category
              -# DOUBLE-ESCAPING NECESSARY
              =h h tag.name
          %wfw:commentRss
            =idea_comments_url(idea, :format => 'rss')
